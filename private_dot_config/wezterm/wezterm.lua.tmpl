local wezterm = require("wezterm")

local function is_vim(pane)
  -- this is set by the plugin, and unset on ExitPre in Neovim
  return pane:get_user_vars().IS_NVIM == 'true'
end

local direction_keys = {
  h = 'Left',
  j = 'Down',
  k = 'Up',
  l = 'Right',
}

local function split_nav(resize_or_move, key)
  return {
    key = key,
    mods = resize_or_move == 'resize' and 'META' or 'CTRL',
    action = wezterm.action_callback(function(win, pane)
      if is_vim(pane) then
        -- pass the keys through to vim/nvim
        win:perform_action({
          SendKey = { key = key, mods = resize_or_move == 'resize' and 'META' or 'CTRL' },
        }, pane)
      else
        if resize_or_move == 'resize' then
          win:perform_action({ AdjustPaneSize = { direction_keys[key], 3 } }, pane)
        else
          win:perform_action({ ActivatePaneDirection = direction_keys[key] }, pane)
        end
      end
    end),
  }
end

return {
	color_scheme = "Catppuccin Mocha",
	font_size = {{ .font_size }},
	font = wezterm.font_with_fallback({
	{{- if eq .device "work-macbook" }}
		"MonaspiceNe Nerd Font"
		{{- else }}
		"Monaspace Neon",
		"Jetbrains Mono",
		{ family = "Symbols Nerd Font Mono", scale = 0.75 },
		{{- end }}
	}),
	line_height = 1.2,

	-- timeout_milliseconds defaults to 1000 and can be omitted
	leader = { key = "a", mods = "CTRL", timeout_milliseconds = 1000 },
	keys = {
		{
			-- Split Vertical
			key = "-",
			mods = "LEADER",
			action = wezterm.action.SplitVertical({ domain = "CurrentPaneDomain" }),
		},
		{
			-- Split Horizontal
			key = "|",
			mods = "LEADER|SHIFT",
			action = wezterm.action.SplitHorizontal({ domain = "CurrentPaneDomain" }),
		},
		split_nav('move', 'h'),
		split_nav('move', 'j'),
		split_nav('move', 'k'),
		split_nav('move', 'l'),
	},
}
